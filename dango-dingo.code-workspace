{
    // Definiert die Ordner, die im VS Code Explorer angezeigt werden.
    "folders": [
        {
            "name": "üöÄ Backend (Python)",
            "path": "backend"
        },
        {
            "name": "üñ•Ô∏è Frontend (Tauri/TS)",
            "path": "frontend"
        },
        {
            "name": "üìö Dokumentation",
            "path": "docs"
        }
    ],
    // Workspace-spezifische Einstellungen, die die User-Einstellungen √ºberschreiben.
    "settings": {
        // Versteckt st√∂rende Ordner im Explorer f√ºr eine bessere √úbersicht.
        "files.exclude": {
            "**/__pycache__": true,
            "**/.venv": true,
            "**/.pytest_cache": true,
            "**/.mypy_cache": true,
            "**/node_modules": true,
            "**/dist": true,
            "**/target": true, // Versteckt den Rust-Build-Ordner von Tauri
            "**/.vscode": true
        },
        "search.exclude": {
            "**/__pycache__": true,
            "**/.venv": true,
            "**/node_modules": true,
            "**/target": true
        },
        // --- Python-spezifische Einstellungen ---
        // Diese gelten nur f√ºr Dateien im "backend"-Ordner.
        "[python]": {
            // Setzt Black als Standard-Formatierer.
            "editor.defaultFormatter": "ms-python.black-formatter",
            // Formatiert den Code automatisch beim Speichern.
            "editor.formatOnSave": true,
            // F√ºhrt Code-Aktionen (Linting-Fixes) beim Speichern aus.
            "editor.codeActionsOnSave": {
                // F√ºhrt Ruff aus, um den Code automatisch zu korrigieren und zu linten.
                "source.fixAll.ruff": "explicit",
                // Sortiert Importe automatisch.
                "source.organizeImports": "explicit"
            }
        },
        // Konfiguration f√ºr Mypy, um strikte Typ√ºberpr√ºfung zu aktivieren.
        "mypy-type-checker.args": [
            "--strict"
        ],
        // --- TypeScript/React-spezifische Einstellungen ---
        // Diese gelten nur f√ºr Dateien im "frontend"-Ordner.
        "[typescript]": {
            "editor.defaultFormatter": "esbenp.prettier-vscode",
            "editor.formatOnSave": true
        },
        "[typescriptreact]": {
            "editor.defaultFormatter": "esbenp.prettier-vscode",
            "editor.formatOnSave": true
        },
        "[json]": {
            "editor.defaultFormatter": "esbenp.prettier-vscode",
            "editor.formatOnSave": true
        },
        "[markdown]": {
            "editor.defaultFormatter": "esbenp.prettier-vscode",
            "editor.formatOnSave": true
        },
        // F√ºhrt ESLint-Fixes beim Speichern aus.
        "editor.codeActionsOnSave": {
            "source.fixAll.eslint": "explicit"
        }
    },
    // Empfiehlt wichtige Erweiterungen f√ºr jeden, der das Projekt √∂ffnet.
    "extensions": {
        "recommendations": [
            // Python
            "ms-python.python", // Offizielle Python-Erweiterung
            "ms-python.black-formatter", // Black-Formatierer
            "charliermarsh.ruff", // Ruff Linter
            "ms-python.mypy-type-checker", // Mypy Typpr√ºfer
            // Frontend & Tauri
            "tauri-apps.tauri-vscode", // Offizielle Tauri-Erweiterung
            "rust-lang.rust-analyzer", // Rust-Unterst√ºtzung (f√ºr Tauri-Kern)
            "esbenp.prettier-vscode", // Prettier-Formatierer
            "dbaeumer.vscode-eslint", // ESLint
            // Allgemeine Hilfsprogramme
            "streetsidesoftware.code-spell-checker", // Rechtschreibpr√ºfung
            "yzhang.markdown-all-in-one" // Bessere Markdown-Bearbeitung
        ]
    }
}